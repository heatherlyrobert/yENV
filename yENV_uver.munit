/*===============================[[ beg-code ]]===============================*/
#include    "yENV.h"
#include    "yENV_priv.h"
#include    "master.c"

#include    "yENV_solo.h"
#include    "yENV_uver.h"

#include    <yUNIT_solo.h>
#include    <ySTR_solo.h>
#include    <yCOLOR_solo.h>

static char       *s_file  = "/tmp/yenv_theia.txt";
static char       *s_alt   = "/tmp/yenv_alt.txt";

char
koios_uver__dataset     (void)
{
   yUNIT_mincond  ("create primary data set");
   system ("echo \"# theia is the greek titan of sight and the shinning light of the clear blue sky\"  > /tmp/yenv_theia.txt");
   system ("echo \"\"                                                                                 >> /tmp/yenv_theia.txt");
   system ("echo \"# UNITTEST Д     Д ===[ LOCKED ]======= Д t Д -0----black----8- Д\"                >> /tmp/yenv_theia.txt");
   system ("echo \"# rec type Д hex Д ---scheme-name------ Д y Д   norm  Д  bright Д\"                >> /tmp/yenv_theia.txt");
   system ("echo \"foreground Д ш60 Д unit test mine       Д c Д ш553311 Д шcc8855 Д\"                >> /tmp/yenv_theia.txt");
   system ("echo \"foreground Д ш61 Д unit test classic    Д - Д ш000000 Д ш404040 Д\"                >> /tmp/yenv_theia.txt");
   system ("echo \"foreground Д ш62 Д unit test mega       Д f Д ш881066 Д шdd20aa Д\"                >> /tmp/yenv_theia.txt");
   system ("echo \"\"                                                                                 >> /tmp/yenv_theia.txt");
   system ("echo \"# end-of-file.  done, finito, completare, whimper [¤┤иии\"                         >> /tmp/yenv_theia.txt");
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("create secondary data set");
   system ("echo \"one\"                                                                               > /tmp/yenv_alt.txt");
   system ("echo \"two\"                                                                              >> /tmp/yenv_alt.txt");
   system ("echo \"three\"                                                                            >> /tmp/yenv_alt.txt");
   system ("echo \"four\"                                                                             >> /tmp/yenv_alt.txt");
   system ("echo \"five\"                                                                             >> /tmp/yenv_alt.txt");
   yUNIT_mindnoc  ();

   return 0;
}

char
koios_uver_upeekier  (char a_scrp, char a_list, char a_unit)
{
   yUNIT_minscrpy ("yENV", "yenv_uver", "(UVER) verify micro version of yENV_peekier");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;
   yENV__unit_quiet  ();

   yenv_uunit ();
   koios_uver__dataset ();

   yUNIT_mincond  ("verify quick success");
   yUNIT_minstr   ("... check normal"                   , yenv_upeekier (s_file,  0,  0, NULL) , "# theia is the greek titan of sight and the shinning light of the clear blue sky");
   yUNIT_minstr   ("... check which"                    , yenv_uwhich ()           , s_file);
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           ,    0);
   yUNIT_minval   ("... check lines"                    , yenv_ulines (s_file)     ,    9);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("attempt with NULL file name");
   yUNIT_minstr   ("... check normal"                   , yenv_upeekier (NULL  ,  0,  0, NULL) , "(null name)");
   yUNIT_minstr   ("... check which"                    , yenv_uwhich ()           , "");
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           , -1);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("attempt with empty file name");
   yUNIT_minstr   ("... check normal"                   , yenv_upeekier (""    ,  0,  0, NULL) , "(empty name)");
   yUNIT_minstr   ("... check which"                    , yenv_uwhich ()           , "");
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           , -1);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("attempt with missing file");
   yUNIT_minstr   ("... check normal"                   , yenv_upeekier ("/tmp/arstion",  0,  0, NULL) , "(missing)");
   yUNIT_minstr   ("... check which"                    , yenv_uwhich ()           , "");
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           , -1);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify second success");
   yUNIT_minstr   ("... check normal"                   , yenv_upeekier (s_alt ,  0,  0, NULL) , "one");
   yUNIT_minstr   ("... check which"                    , yenv_uwhich ()           , s_alt);
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           ,    0);
   yUNIT_minval   ("... check lines"                    , yenv_ulines (s_alt)      ,    5);
   yUNIT_mindnoc  ();

   yENV__unit_end    ();
   yUNIT_minprcs  ();
   return 0;
}

char
koios_uver_uindex  (char a_scrp, char a_list, char a_unit)
{
   yUNIT_minscrpy ("yENV", "yENV_uver", "(UVER) verify micro version of yENV_index");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;
   yENV__unit_quiet  ();

   yenv_uunit ();
   koios_uver__dataset ();

   yUNIT_mincond  ("verify quick success by index");
   yUNIT_minstr   ("... check normal"                   , yenv_uindex (s_file,          0) , "# theia is the greek titan of sight and the shinning light of the clear blue sky");
   yUNIT_minstr   ("... check which"                    , yenv_uwhich ()           , s_file);
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           ,    0);
   yUNIT_minval   ("... check lines"                    , yenv_ulines (s_file)     ,    9);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify ordinal access");
   yUNIT_minstr   ("... check normal"                   , yenv_uindex (s_file,          0) , "# theia is the greek titan of sight and the shinning light of the clear blue sky");
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           ,    0);
   yUNIT_minstr   ("... check normal"                   , yenv_uindex (s_file,          2) , "# UNITTEST Д     Д ===[ LOCKED ]======= Д t Д -0----black----8- Д");
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           ,    2);
   yUNIT_minstr   ("... check normal"                   , yenv_uindex (s_file,          4) , "foreground Д ш60 Д unit test mine       Д c Д ш553311 Д шcc8855 Д");
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           ,    4);
   yUNIT_minstr   ("... check normal"                   , yenv_uindex (s_file,          6) , "foreground Д ш62 Д unit test mega       Д f Д ш881066 Д шdd20aa Д");
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           ,    6);
   yUNIT_minstr   ("... check normal"                   , yenv_uindex (s_file,          8) , "# end-of-file.  done, finito, completare, whimper [¤┤иии");
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           ,    8);
   yUNIT_minstr   ("... check normal"                   , yenv_uindex (s_file,          9) , "(over)");
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           ,    8);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify a negative/reset");
   yUNIT_minstr   ("... check normal"                   , yenv_uindex (s_file,         -1) , "(reset)");
   yUNIT_minstr   ("... check which"                    , yenv_uwhich ()           , s_file);
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           ,   -1);
   yUNIT_mindnoc  ();

   yENV__unit_end    ();
   yUNIT_minprcs  ();
   return 0;
}

char
koios_code_upeek   (char a_scrp, char a_list, char a_unit)
{
   char        s_file      [LEN_HUND]  = "/tmp/yurg_theia.txt";

   yUNIT_minscrpy ("yENV", "yENV_uver", "(UVER) verify micro version of peek");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;
   yENV__unit_quiet  ();

   yenv_uunit ();
   koios_uver__dataset ();

   yUNIT_mincond  ("verify cursor access (forward)");
   yUNIT_minstr   ("... check head"                     , yenv_upeek  (s_file, YDLST_HEAD) , "# theia is the greek titan of sight and the shinning light of the clear blue sky");
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           ,    0);
   yUNIT_minval   ("... check lines"                    , yenv_ulines (s_file)     ,    9);
   yUNIT_minstr   ("... check prev (BOOM)"              , yenv_upeek  (s_file, YDLST_PREV) , "(under)");
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           ,    0);
   yUNIT_minval   ("... check lines"                    , yenv_ulines (s_file)     ,    9);
   yUNIT_minstr   ("... check next"                     , yenv_upeek  (s_file, YDLST_NEXT) , "");
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           ,    1);
   yUNIT_minval   ("... check lines"                    , yenv_ulines (s_file)     ,    9);
   yUNIT_minstr   ("... check next"                     , yenv_upeek  (s_file, YDLST_NEXT) , "# UNITTEST Д     Д ===[ LOCKED ]======= Д t Д -0----black----8- Д");
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           ,    2);
   yUNIT_minval   ("... check lines"                    , yenv_ulines (s_file)     ,    9);
   yUNIT_minstr   ("... check next"                     , yenv_upeek  (s_file, YDLST_NEXT) , "# rec type Д hex Д ---scheme-name------ Д y Д   norm  Д  bright Д");
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           ,    3);
   yUNIT_minval   ("... check lines"                    , yenv_ulines (s_file)     ,    9);
   yUNIT_minstr   ("... check next"                     , yenv_upeek  (s_file, YDLST_NEXT) , "foreground Д ш60 Д unit test mine       Д c Д ш553311 Д шcc8855 Д");
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           ,    4);
   yUNIT_minval   ("... check lines"                    , yenv_ulines (s_file)     ,    9);
   yUNIT_minstr   ("... check curr"                     , yenv_upeek  (s_file, YDLST_CURR) , "foreground Д ш60 Д unit test mine       Д c Д ш553311 Д шcc8855 Д");
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           ,    4);
   yUNIT_minval   ("... check lines"                    , yenv_ulines (s_file)     ,    9);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify cursor access (backward)");
   yUNIT_minstr   ("... check tail"                     , yenv_upeek  (s_file, YDLST_TAIL) , "# end-of-file.  done, finito, completare, whimper [¤┤иии");
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           ,    8);
   yUNIT_minval   ("... check lines"                    , yenv_ulines (s_file)     ,    9);
   yUNIT_minstr   ("... check tail"                     , yenv_upeek  (s_file, YDLST_CURR) , "# end-of-file.  done, finito, completare, whimper [¤┤иии");
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           ,    8);
   yUNIT_minval   ("... check lines"                    , yenv_ulines (s_file)     ,    9);
   yUNIT_minstr   ("... check next (BOOM)"              , yenv_upeek  (s_file, YDLST_NEXT) , "(over)");
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           ,    8);
   yUNIT_minval   ("... check lines"                    , yenv_ulines (s_file)     ,    9);
   yUNIT_minstr   ("... check prev"                     , yenv_upeek  (s_file, YDLST_PREV) , "");
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           ,    7);
   yUNIT_minval   ("... check lines"                    , yenv_ulines (s_file)     ,    9);
   yUNIT_minstr   ("... check prev"                     , yenv_upeek  (s_file, YDLST_PREV) , "foreground Д ш62 Д unit test mega       Д f Д ш881066 Д шdd20aa Д");
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           ,    6);
   yUNIT_minval   ("... check lines"                    , yenv_ulines (s_file)     ,    9);
   yUNIT_minstr   ("... check curr"                     , yenv_upeek  (s_file, YDLST_CURR) , "foreground Д ш62 Д unit test mega       Д f Д ш881066 Д шdd20aa Д");
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           ,    6);
   yUNIT_minval   ("... check lines"                    , yenv_ulines (s_file)     ,    9);
   yUNIT_mindnoc  ();

   yENV__unit_end    ();
   yUNIT_minprcs  ();
   return 0;
}

char
koios_code_umixed  (char a_scrp, char a_list, char a_unit)
{
   char        s_file      [LEN_HUND]  = "/tmp/yurg_theia.txt";

   yUNIT_minscrpy ("yENV", "yENV_uver", "(UVER) verify micro version of peek");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;
   yENV__unit_quiet  ();

   yenv_uunit ();
   koios_uver__dataset ();

   yUNIT_mincond  ("verify index move");
   yUNIT_minstr   ("... go to middle"                   , yenv_uindex (s_file      ,    4) , "foreground Д ш60 Д unit test mine       Д c Д ш553311 Д шcc8855 Д");
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           ,    4);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify cursoring down");
   yUNIT_minstr   ("... check previous"                 , yenv_upeek  (s_file, YDLST_PREV) , "# rec type Д hex Д ---scheme-name------ Д y Д   norm  Д  bright Д");
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           ,    3);
   yUNIT_minstr   ("... check previous"                 , yenv_upeek  (s_file, YDLST_PREV) , "# UNITTEST Д     Д ===[ LOCKED ]======= Д t Д -0----black----8- Д");
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           ,    2);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify index move again");
   yUNIT_minstr   ("... check normal"                   , yenv_uindex (s_file,          6) , "foreground Д ш62 Д unit test mega       Д f Д ш881066 Д шdd20aa Д");
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           ,    6);
   yUNIT_mindnoc  ();

   yUNIT_mincond  ("verify cursoring up");
   yUNIT_minstr   ("... check next"                     , yenv_upeek  (s_file, YDLST_NEXT) , "");
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           ,    7);
   yUNIT_minstr   ("... check next" , yenv_upeek  (s_file, YDLST_NEXT) , "# end-of-file.  done, finito, completare, whimper [¤┤иии");
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           ,    8);
   yUNIT_mindnoc  ();

   yENV__unit_end    ();
   yUNIT_minprcs  ();
   return 0;
}

char
koios_code_unormal (char a_scrp, char a_list, char a_unit)
{
   char        s_file      [LEN_HUND]  = "/tmp/yurg_theia.txt";

   yUNIT_minscrpy ("yENV", "yENV_uver", "(UVER) verify micro version of peek");
   if (a_list == '!')    { yUNIT_minprcs (); return 0; }
   if (a_unit != 0 && a_scrp != a_unit)  return 0;
   if (a_list == 'y')                    return 0;
   yENV__unit_quiet  ();

   yenv_unormal   ();
   koios_uver__dataset ();

   yUNIT_mincond  ("verify backward cursor bounce in normal mode");
   yUNIT_minstr   ("... check head"                     , yenv_upeek  (s_file, YDLST_HEAD) , "# theia is the greek titan of sight and the shinning light of the clear blue sky");
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           ,    0);
   yUNIT_minval   ("... check lines"                    , yenv_ulines (s_file)     ,    9);
   yUNIT_minstr   ("... check prev (BOOM)"              , yenv_upeek  (s_file, YDLST_PREV) , "(n/a)");
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           ,    0);
   yUNIT_minval   ("... check lines"                    , yenv_ulines (s_file)     ,    9);

   yUNIT_mincond  ("verify forward cursor bounce in normal mode");
   yUNIT_minstr   ("... check tail"                     , yenv_upeek  (s_file, YDLST_TAIL) , "# end-of-file.  done, finito, completare, whimper [¤┤иии");
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           ,    8);
   yUNIT_minval   ("... check lines"                    , yenv_ulines (s_file)     ,    9);
   yUNIT_minstr   ("... check next (BOOM)"              , yenv_upeek  (s_file, YDLST_NEXT) , "(n/a)");
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           ,    8);
   yUNIT_minval   ("... check lines"                    , yenv_ulines (s_file)     ,    9);

   yenv_uunit ();

   yUNIT_mincond  ("verify backward bounce in unit test mode");
   yUNIT_minstr   ("... check head"                     , yenv_upeek  (s_file, YDLST_HEAD) , "# theia is the greek titan of sight and the shinning light of the clear blue sky");
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           ,    0);
   yUNIT_minval   ("... check lines"                    , yenv_ulines (s_file)     ,    9);
   yUNIT_minstr   ("... check prev (BOOM)"              , yenv_upeek  (s_file, YDLST_PREV) , "(under)");
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           ,    0);
   yUNIT_minval   ("... check lines"                    , yenv_ulines (s_file)     ,    9);

   yUNIT_mincond  ("verify forward cursor bounce in unit test mode");
   yUNIT_minstr   ("... check tail"                     , yenv_upeek  (s_file, YDLST_TAIL) , "# end-of-file.  done, finito, completare, whimper [¤┤иии");
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           ,    8);
   yUNIT_minval   ("... check lines"                    , yenv_ulines (s_file)     ,    9);
   yUNIT_minstr   ("... check next (BOOM)"              , yenv_upeek  (s_file, YDLST_NEXT) , "(over)");
   yUNIT_minval   ("... check where"                    , yenv_uwhere ()           ,    8);
   yUNIT_minval   ("... check lines"                    , yenv_ulines (s_file)     ,    9);

   yENV__unit_end    ();
   yUNIT_minprcs  ();
   return 0;
}

char
main                    (int a_argc, char *a_argv [])
{
   /*---(locals)-----------+-----+-----+-*/
   int         x_unit      =    0;
   int         n           =    0;
   char        x_list      =    0;
   /*---(arguments)----------------------*/
   printf ("## %s\n", P_ONELINE);
   printf ("## pre-yUNIT unit testing : %s\n", a_argv [0]);
   if (a_argc >= 2) {
      if (strcmp (a_argv [1], "--list") == 0)       x_list = 'y';
      else if (strcmp (a_argv [1], "--inst") == 0)  x_list = '!';
      else                                          x_unit = atoi (a_argv [1]);
   }
   if (x_unit  >  0 )         printf ("## selected single script (%2d)\n", x_unit);
   else                       printf ("## selected all scripts\n");
   if (x_list == 'y')         printf ("## list script(s) only\n");
   else if (x_list == '!')    printf ("## generate initial wave file\n");
   else                       printf ("## execute conditions and steps\n");
   printf ("\n");
   /*---(scripts)------------------------*/
   koios_uver_upeekier  (++n, x_list, x_unit);
   koios_uver_uindex    (++n, x_list, x_unit);
   koios_code_upeek     (++n, x_list, x_unit);
   koios_code_umixed    (++n, x_list, x_unit);
   koios_code_unormal   (++n, x_list, x_unit);
   /*---(wrapup)-------------------------*/
   yUNIT_mintinu    ();
   /*---(complete)-----------------------*/
   return 0;
}

