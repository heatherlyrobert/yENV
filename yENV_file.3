.TH yENV_file· 3 2024-may "linux" "interfacing with micro, code-inclusion version"

.SH NAME
yENV \- provide consistent linux filesystem and security services

.SH PATRON (see HERITAGE at bottom for more)
tartarus-eeroeis (murky one) linux filesystem and security services

.SH IMAGERY
dreaded place of darkness and punishment reserved for the worst sinners

.SH SUMMARY (see yENV (7) for more information)
yENV and yENV_uver allow for consistent auditing and access to the
linux security system so that many of my programs can take advantage
of my latest updates with little work.

.SH SERIOUS FOREWARNING
i am a crazy, selfish, dog-fooding c-programmer.  my code tends to be
experimental and constantly evolving.  my point is NOT to be the best, it is
to challenge myself, build from scratch, and allow fast problem solving.

.SH DOCUMENTATION
.nf
yENV (3)           interfacing with yENV in general
yENV_uver (3)      interfacing with micro, code-inclusion version
yENV_peek (3)      interfacing with file content review
yENV_entry (3)     interfacing with creation/removal functions
yENV_audit (3)     interfacing with auditing functions
.B yENV_file (3)´´´´´´interfacing with file open/close functions
yENV_user (3)      interfacing with users/owners
yENV_group (3)     interfacing with groups
yENV_perms (3)     interfacing with permissions
yENV_score (3)     interfacing with application scoring
yENV_base (3)      interfacing with whoami function
yENV (7)           decision rationale, scope, and objectives

.SH TABLE OF CONTENTS
.nf  
a) overview        quick summary
b) synopsis        function overview
c) openning        verify and open file
d) closing         close file

.SH A) OVERVIEW
yENV provides a confirmation interface for openning and closing files, where
it checks whether the file exists and is properly secured before using.
very, very, very bloody useful in secure programs.

.SH B) SYNOPSIS
.nf
usage is noted on the far-left of each entry...
   ! means once-per-program
   ¼ primary interface
   ´ every program
   · not in every program

---openning------------------------------------
·  char     yENV_open_full       (char* <label>, char* <dir>, ´´´);
·  char     yENV_open            (char* <dir>, ´´´);

---closing-------------------------------------
·  char     yENV_close_full      (char* <label>, ´´´);
·  char     yENV_close           (FILE** <file>);

.SH C) OPENNING
openning regular files is easy, but consistently confirming their security
before openning is fussy and time-consuming.  these functions remove a great
deal of reduntant effort from my security related programs like themis, argus,
hermes, etc.

.SS char  yENV_open_full (char* <label>, char* <name>, ´´´);
opens a file if it meets all the security requirements.

.RS 3
.B char* <a_label> short label for debugging and tracing
.RE

.RS 3
.B char* <a_dir> path to regular file
.RE

.RS 3
.B char* <a_name> name of regular file
.RE

.RS 3
.B char <a_mode> one character file access mode (see yENV (3))
.RE

.RS 3
.B char* <r_mode> actual file access mode (for logging/debugging)
.RE

.RS 3
.B char* <r_note> short description of mode (for logging/debugging)
.RE

.RS 3
.B char* <r_full> cleaned up, full name of file
.RE

.RS 3
.B FILE** <b_file> actual file pointer, must be NULL to open.
.RE

.SS char  yENV_open (char* <dir>, char* <file>, ´´´);
simplified version of yENV_open_full.  it only uses a_dir, a_name, a_mode,
and b_file.

.SH D) CLOSING
closing file is much simplier, but this function is a pair to yENV_open_full,
checks the pointer, and grounds after closing.

.SS char  yENV_close_full (char* <label>, FILE** <file>, ´´´);
opens a file if it meets all the security requirements.

.RS 3
.B char* <a_label> short label for debugging and tracing
.RE

.RS 3
.B FILE** <b_file> actual file pointer, grounds after closing.
.RE

.RS 3
.B char* <c_sync> if yes, the drive is sync'd too
.RE

.SS char  yENV_close (FILE** <file>);
simplified version of yENV_close_full.  it only uses b_file.

.SS char  yENV_rmdir (char* <name>);
removes directory, if empty, as a simpifier for yENV_removier.

.SS char  yENV_rmdir_fully (char* <name>);
removes directory (and underlying files) as a simpifier for yENV_removier.
this is only allowed to work under ¶/tmp¶

.SH BUGS
yENV is incredibly stable for me, but if anyone else used it it might explode
and take the universe with it.

.SH COLOPHON
this page is part of a documentation package meant to make the use of the
heatherly tools easier and faster
